# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the License);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an AS IS BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
# Store these in your credential manager.
vars:

# pull request vars
- &github_repo evandbrown/kf
- &github_access_token ((github_access_token)) 

# ci config vars
- &ci_git_uri ((ci_git_uri))
- &ci_git_branch ((ci_git_branch))
- &ci_image_uri ((ci_image_uri))
- &service_account_json ((service_account_json))

# nightly build vars
- &release_service_account_json ((release_service_account_json))
- &ko_docker_release_repo ((ko_docker_release_repo))
- &release_bucket ((release_bucket))
- &cli_release_bucket ((cli_release_bucket))

# k8s config
- &gcp_project_id ((gcp_project_id))
- &k8s_cluster_name ((k8s_cluster_name))
- &k8s_cluster_zone ((k8s_cluster_zone))

# go config
- &go_proxy https://proxy.golang.org
- &go_sum_db sum.golang.org

- &ci-image-source
  repository: *ci_image_uri
  username: _json_key
  password: *service_account_json

- &on_failure
  put: release-pr
  params:
    path: release-pr
    status: FAILURE
    description: Concourse "release" job failed.
# ---- end vars ----

resource_types:
- name: pull-request
  type: docker-image
  source:
    repository: m0pt0pmatt/github-pr-resource

resources:
- name: release-pr
  type: pull-request
  check_every: 10s 
  source:
    repository: *github_repo
    access_token: *github_access_token
    labels: ["release"]
- name: ci-pipelines-src
  type: git
  source:
    branch: *ci_git_branch
    uri: *ci_git_uri
    paths:
    - ci/concourse/pipelines
jobs:
- name: unit-test
  plan:
  - get: release-pr
    trigger: true
  - get: ci-pipelines-src
    trigger: false
    params: {submodules: none}
  - task: unit
    timeout: 10m
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: *ci-image-source
      inputs:
      - name: release-pr
      - name: ci-pipelines-src
      run:
        dir: release-pr
        path: bash
        args:
        - -exc
        - |
          # Run unit tests
          hack/unit-test.sh
      params:
        GOPROXY: *go_proxy
        GOSUMDB: *go_sum_db

- name: integration-test
  plan:
  - get: release-pr
    trigger: true
  - get: ci-pipelines-src
    trigger: false
    params: {submodules: none}
  - task: integration
    timeout: 10m
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: *ci-image-source
      inputs:
      - name: release-pr
      - name: ci-pipelines-src
      run:
        dir: release-pr
        path: bash
        args:
        - -exc
        - |
          # Login to Kubernetes
          set +x
          /bin/echo "$SERVICE_ACCOUNT_JSON" > key.json
          set -x
          /bin/echo Authenticating to kubernetes...
          gcloud auth activate-service-account --key-file key.json
          gcloud config set project "$GCP_PROJECT_ID"
          gcloud container clusters get-credentials "$K8S_CLUSTER_NAME" \
            --zone "$K8S_CLUSTER_ZONE" \
            --project "$GCP_PROJECT_ID"
          /bin/echo 'y' | gcloud auth configure-docker

          # Run unit tests
          hack/integration-test.sh
      params:
        GOPROXY: *go_proxy
        GOSUMDB: *go_sum_db
        SERVICE_ACCOUNT_JSON: *service_account_json
        GCP_PROJECT_ID: *gcp_project_id
        K8S_CLUSTER_NAME: *k8s_cluster_name
        K8S_CLUSTER_ZONE: *k8s_cluster_zone
- name: check
  plan:
  - aggregate:
    - get: release-pr
      trigger: true
    - get: ci-pipelines-src
      trigger: false
      params: {submodules: none}
  - put: release-pr
    params:
      path: release-pr
      status: PENDING
  - task: check
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: *ci-image-source
      inputs:
      - name: release-pr
      params:
        GOPROXY: *go_proxy
        GOSUMDB: *go_sum_db
      run:
        dir: release-pr
        path: bash
        args:
        - -exc
        - |
          hack/check-linters.sh
          hack/check-go-generate.sh
          hack/check-code-generator.sh
    on_failure: *on_failure
- name: build
  plan:
  - aggregate:
    - get: release-pr
      trigger: true
      passed: [unit-test, integration-test]
    - get: ci-pipelines-src
      trigger: false
      params: {submodules: none}
  - task: build
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: *ci-image-source
      params:
        SERVICE_ACCOUNT_JSON: *release_service_account_json
        GCP_PROJECT_ID: *gcp_project_id
        KO_DOCKER_REPO: *ko_docker_release_repo
        RELEASE_BUCKET: *release_bucket
        CLI_RELEASE_BUCKET: *cli_release_bucket
      inputs:
      - name: release-pr
      outputs:
      - name: artifacts
      run:
        path: bash
        args:
        - -exc
        - |
          artifacts=`pwd`/artifacts
          pushd release-pr
            ./hack/build-release.sh $artifacts
          popd
  - task: prepare-cluster
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: *ci-image-source
      params:
        SERVICE_ACCOUNT_JSON: *release_service_account_json
        GCP_PROJECT_ID: *gcp_project_id
        RELEASE_BUCKET: *release_bucket
        CLI_RELEASE_BUCKET: *cli_release_bucket
      inputs:
      - name: release-pr
      - name: artifacts
      run:
        path: bash
        args:
        - -exc
        - |
          ls -la artifacts/
    on_failure: *on_failure
- name: manual-approval
  plan:
  - aggregate:
    - get: release-pr
      trigger: false
      passed: [build, check]
    - get: ci-pipelines-src
      trigger: false
  - task: build
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: *ci-image-source
      inputs:
      - name: release-pr
      run:
        path: bash
        args:
        - -exc
        - |
          exit 0
    on_failure: *on_failure
    on_success:
      put: release-pr
      params:
        path: release-pr
        status: SUCCESS
        comment: OK to merge release PR!
        description: OK to merge release PR!
